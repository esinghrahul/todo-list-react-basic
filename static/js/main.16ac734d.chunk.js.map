{"version":3,"sources":["components/todo-item.component.jsx","components/todo-list.component.jsx","components/todo-input.component.jsx","App.js","serviceWorker.js","index.js"],"names":["TodoItem","title","handleDelete","handleEdit","className","onClick","TodoList","this","props","items","clearList","length","map","item","key","id","type","Component","TodoInput","handleChange","handleSubmit","editItem","onSubmit","placeholder","value","onChange","disabled","App","state","uuid","e","setState","target","preventDefault","newItem","updatedItems","filteredItems","filter","uneditedItems","selectedItem","find","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.16ac734d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst TodoItem = ({title, handleDelete, handleEdit}) => (\r\n    <li className=\"list-group-item text-capitalize d-flex justify-content-between my-2\">\r\n        <h6>{title}</h6>\r\n        <div className=\"todo-icon\">\r\n            <span className=\"mx-2 text-success\" onClick={handleEdit}>\r\n                <i className=\"fas fa-pen\" />\r\n            </span>\r\n            <span className=\"mx-2 text-danger\" onClick={handleDelete}>\r\n                <i className=\"fas fa-trash\" />\r\n            </span>\r\n        </div>\r\n    </li>\r\n)\r\n\r\nexport default TodoItem","import React, { Component } from \"react\";\r\n\r\nimport TodoItem from \"./todo-item.component\";\r\n\r\nexport default class TodoList extends Component {\r\n  render() {\r\n    const { items, clearList, handleDelete, handleEdit } = this.props;\r\n    return (\r\n      <ul className=\"list-group my-5\">\r\n        <h3 className=\"text-capitalize text-center\">{items.length === 0 ? 'Add items to your Todo List': ''}</h3>\r\n        {items.map((item) => (\r\n          <TodoItem\r\n            key={item.id}\r\n            title={item.title}\r\n            handleDelete={() => handleDelete(item.id)}\r\n            handleEdit={() => handleEdit(item.id)}\r\n          />\r\n        ))}\r\n        <button type=\"button\" className=\"btn btn-danger  btn-block mt-5\" onClick= {clearList}> Clear List</button>\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nimport uuid from 'uuid'\r\n\r\nexport default class TodoInput extends Component{\r\n    render(){\r\n        const {item, handleChange, handleSubmit, editItem} = this.props\r\n        return(\r\n            <div className=\"card card-body my-3\">\r\n                <form onSubmit= {handleSubmit}>\r\n                    <div className=\"input-group\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <div className= \"input-group-text bg-primary text-white\">\r\n                                <i className=\"fas fa-book\" />\r\n                            </div>\r\n                        </div>\r\n                        <input type=\"text\" className=\"form-control text-capitalize\" placeholder=\"Add Item\" value={item} onChange={handleChange} />\r\n                    </div>\r\n                    <button type=\"submit\" disabled = {!item} className= {editItem ? \"btn btn-block btn-success mt-3 text-capitalize\" : \"btn btn-block btn-primary mt-3 text-capitalize\"}>{editItem ? 'Edit Item' : 'Add Item'}</button>\r\n                </form>\r\n                </div>\r\n        )\r\n    }\r\n}","import React from 'react';\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport {v4 as uuid} from 'uuid'\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\n\nimport TodoList from './components/todo-list.component';\nimport TodoInput from './components/todo-input.component';\n\n\nexport default class App extends React.Component{\n\n  state={\n    items: [],\n    id: uuid(),\n    item: '',\n    editItem: false\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      item: e.target.value\n    })\n  }\n  handleSubmit = (e) => {\n    e.preventDefault()\n    const newItem= {\n      id: this.state.id,\n      title: this.state.item\n    }\n    const updatedItems= [...this.state.items, newItem]\n    this.setState({\n      items: updatedItems,\n      item: '',\n      id: uuid(),\n      editItem: false\n    })\n  }\n  handleDelete = (id) => {\n    const filteredItems = this.state.items.filter(item => item.id !== id)\n    this.setState({\n      items: filteredItems\n    })\n  }\n  handleEdit = (id) => {\n    const uneditedItems = this.state.items.filter(item => item.id !== id)\n    const selectedItem = this.state.items.find(item => item.id === id)\n    this.setState({\n      items: uneditedItems,\n      item: selectedItem.title,\n      id: id,\n      editItem: true\n    })\n  }\n  clearList = () => {\n    this.setState({\n      items: []\n    })\n  }\n  render(){\n  return (\n    <div className=\"container\">\n      <div className= \"row\">\n        <div className= \"col-10 mx-auto col-md-8 mt-5\">\n          <h3 className=\"text-capitalize text-center\">\n            <TodoInput item ={this.state.item} handleChange= {this.handleChange} handleSubmit= {this.handleSubmit} editItem = {this.state.editItem} />\n            <TodoList items = {this.state.items} clearList = {this.clearList} handleDelete = {this.handleDelete} handleEdit= {this.handleEdit} />\n          </h3>\n        </div>\n      </div>\n    </div>\n  );}\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}